#!/bin/bash
#
# MANTA Camera Setup Tool
# Interactive setup script for MANTA Camera system
#

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Check if running as root
if [ "$(id -u)" -ne 0 ]; then
    echo -e "${RED}This script must be run as root${NC}" >&2
    echo "Please use: sudo manta-setup"
    exit 1
fi

# Paths
CONFIG_DIR="/etc/manta-camera"
INSTALL_DIR="/usr/share/manta-camera"
LOG_DIR="/var/log/manta-camera"
CONFIG_FILE="${CONFIG_DIR}/config.yaml"
FIREBASE_DIR="${INSTALL_DIR}/firebase"
FIREBASE_CONFIG="${FIREBASE_DIR}/firebase_config.json"
ENCRYPTION_KEY_FILE="/etc/manta-camera/.secret_key"

# Welcome message
show_welcome() {
    clear
    echo -e "${BLUE}==============================================${NC}"
    echo -e "${BLUE}    MANTA Camera System Setup Tool     ${NC}"
    echo -e "${BLUE}==============================================${NC}"
    echo
    echo -e "This tool helps you configure your MANTA Camera system."
    echo
}

# Main menu
show_main_menu() {
    show_welcome
    echo -e "Please select an option:"
    echo
    echo -e "  ${YELLOW}1)${NC} Configure camera settings"
    echo -e "  ${YELLOW}2)${NC} Configure detection parameters"
    echo -e "  ${YELLOW}3)${NC} Set up Firebase integration"
    echo -e "  ${YELLOW}4)${NC} Set up encryption key"
    echo -e "  ${YELLOW}5)${NC} Test camera"
    echo -e "  ${YELLOW}6)${NC} Manage MANTA service"
    echo -e "  ${YELLOW}7)${NC} View logs"
    echo -e "  ${YELLOW}8)${NC} Check system status"
    echo -e "  ${YELLOW}9)${NC} Apply hardware-specific optimizations"
    echo -e "  ${YELLOW}0)${NC} Exit"
    echo
    read -p "Enter your choice [0-9]: " choice
    
    case $choice in
        1) configure_camera ;;
        2) configure_detection ;;
        3) setup_firebase ;;
        4) setup_encryption ;;
        5) test_camera ;;
        6) manage_service ;;
        7) view_logs ;;
        8) check_status ;;
        9) optimize_hardware ;;
        0) exit 0 ;;
        *) 
            echo -e "${RED}Invalid option. Please try again.${NC}"
            sleep 2
            show_main_menu
            ;;
    esac
}

# Configure camera
configure_camera() {
    show_welcome
    echo -e "${BLUE}Camera Configuration${NC}"
    echo -e "========================="
    echo
    
    # Read current settings if they exist
    if [ -f "$CONFIG_FILE" ]; then
        CAM_ID=$(grep -A10 "camera:" "$CONFIG_FILE" | grep "id:" | awk -F'"' '{print $2}')
        CAM_SOURCE=$(grep -A10 "camera:" "$CONFIG_FILE" | grep "source:" | awk '{print $2}')
        CAM_WIDTH=$(grep -A10 "resolution:" "$CONFIG_FILE" | grep "width:" | awk '{print $2}')
        CAM_HEIGHT=$(grep -A10 "resolution:" "$CONFIG_FILE" | grep "height:" | awk '{print $2}')
        CAM_FPS=$(grep -A10 "camera:" "$CONFIG_FILE" | grep "fps:" | awk '{print $2}')
    else
        CAM_ID="cam_001"
        CAM_SOURCE=0
        CAM_WIDTH=640
        CAM_HEIGHT=480
        CAM_FPS=15
    fi
    
    # Prompt for new values
    read -p "Camera ID [$CAM_ID]: " new_cam_id
    CAM_ID=${new_cam_id:-$CAM_ID}
    
    read -p "Camera source (0=default camera, or RTSP URL) [$CAM_SOURCE]: " new_cam_source
    CAM_SOURCE=${new_cam_source:-$CAM_SOURCE}
    
    read -p "Resolution width [$CAM_WIDTH]: " new_cam_width
    CAM_WIDTH=${new_cam_width:-$CAM_WIDTH}
    
    read -p "Resolution height [$CAM_HEIGHT]: " new_cam_height
    CAM_HEIGHT=${new_cam_height:-$CAM_HEIGHT}
    
    read -p "Frames per second [$CAM_FPS]: " new_cam_fps
    CAM_FPS=${new_cam_fps:-$CAM_FPS}
    
    # Update configuration
    if [ -f "$CONFIG_FILE" ]; then
        # Update existing config
        sed -i "s/id: \".*\"/id: \"$CAM_ID\"/" "$CONFIG_FILE"
        sed -i "s/source: .*/source: $CAM_SOURCE/" "$CONFIG_FILE"
        sed -i "s/width: .*/width: $CAM_WIDTH/" "$CONFIG_FILE"
        sed -i "s/height: .*/height: $CAM_HEIGHT/" "$CONFIG_FILE"
        sed -i "s/fps: .*/fps: $CAM_FPS/" "$CONFIG_FILE"
    else
        # Create new config file
        mkdir -p "$CONFIG_DIR"
        echo "# MANTA Camera Configuration" > "$CONFIG_FILE"
        echo "# Generated by manta-setup" >> "$CONFIG_FILE"
        echo "camera:" >> "$CONFIG_FILE"
        echo "  id: \"$CAM_ID\"" >> "$CONFIG_FILE"
        echo "  source: $CAM_SOURCE" >> "$CONFIG_FILE"
        echo "  resolution:" >> "$CONFIG_FILE"
        echo "    width: $CAM_WIDTH" >> "$CONFIG_FILE"
        echo "    height: $CAM_HEIGHT" >> "$CONFIG_FILE"
        echo "  fps: $CAM_FPS" >> "$CONFIG_FILE"
    fi
    
    echo -e "${GREEN}Camera configuration updated successfully.${NC}"
    read -p "Press Enter to continue..." dummy
    show_main_menu
}

# Configure detection parameters
configure_detection() {
    show_welcome
    echo -e "${BLUE}Detection Configuration${NC}"
    echo -e "==========================="
    echo
    
    # Read current settings if they exist
    if [ -f "$CONFIG_FILE" ]; then
        MODEL_PATH=$(grep -A10 "detection:" "$CONFIG_FILE" | grep "model_path:" | awk '{print $2}')
        CONFIDENCE=$(grep -A10 "detection:" "$CONFIG_FILE" | grep "confidence_threshold:" | awk '{print $2}')
        NMS=$(grep -A10 "detection:" "$CONFIG_FILE" | grep "nms_threshold:" | awk '{print $2}')
        DEVICE=$(grep -A10 "detection:" "$CONFIG_FILE" | grep "device:" | awk '{print $2}')
    else
        MODEL_PATH="models/yolov8n.onnx"
        CONFIDENCE=0.5
        NMS=0.45
        DEVICE="CPU"
    fi
    
    # Remove quotes if present
    MODEL_PATH=$(echo "$MODEL_PATH" | tr -d '"')
    DEVICE=$(echo "$DEVICE" | tr -d '"')
    
    # Prompt for new values
    read -p "Model path [$MODEL_PATH]: " new_model_path
    MODEL_PATH=${new_model_path:-$MODEL_PATH}
    
    read -p "Confidence threshold (0.0-1.0) [$CONFIDENCE]: " new_confidence
    CONFIDENCE=${new_confidence:-$CONFIDENCE}
    
    read -p "NMS threshold (0.0-1.0) [$NMS]: " new_nms
    NMS=${new_nms:-$NMS}
    
    read -p "Device (CPU, NPU, CUDA) [$DEVICE]: " new_device
    DEVICE=${new_device:-$DEVICE}
    
    # Update configuration
    if grep -q "detection:" "$CONFIG_FILE"; then
        # Update existing config
        sed -i "s|model_path: .*|model_path: \"$MODEL_PATH\"|" "$CONFIG_FILE"
        sed -i "s/confidence_threshold: .*/confidence_threshold: $CONFIDENCE/" "$CONFIG_FILE"
        sed -i "s/nms_threshold: .*/nms_threshold: $NMS/" "$CONFIG_FILE"
        sed -i "s/device: .*/device: \"$DEVICE\"/" "$CONFIG_FILE"
    else
        # Append to config file
        echo "" >> "$CONFIG_FILE"
        echo "detection:" >> "$CONFIG_FILE"
        echo "  model_path: \"$MODEL_PATH\"" >> "$CONFIG_FILE"
        echo "  confidence_threshold: $CONFIDENCE" >> "$CONFIG_FILE"
        echo "  nms_threshold: $NMS" >> "$CONFIG_FILE"
        echo "  device: \"$DEVICE\"" >> "$CONFIG_FILE"
        echo "  classes:" >> "$CONFIG_FILE"
        echo "    - person" >> "$CONFIG_FILE"
    fi
    
    # Check if model file exists
    if [[ "$MODEL_PATH" != http* ]] && [ ! -f "$INSTALL_DIR/$MODEL_PATH" ]; then
        echo -e "${YELLOW}Warning: Model file not found at $INSTALL_DIR/$MODEL_PATH${NC}"
        echo "You can download YOLOv8 models from https://github.com/ultralytics/assets/releases/"
        echo "and place them in $INSTALL_DIR/models/"
    fi
    
    echo -e "${GREEN}Detection configuration updated successfully.${NC}"
    read -p "Press Enter to continue..." dummy
    show_main_menu
}

# Set up Firebase integration
setup_firebase() {
    show_welcome
    echo -e "${BLUE}Firebase Configuration${NC}"
    echo -e "=========================="
    echo
    
    # Check if Firebase is already configured
    if grep -q "firebase:" "$CONFIG_FILE" && [ -f "$FIREBASE_CONFIG" ]; then
        echo "Firebase appears to be already configured."
        read -p "Do you want to reconfigure it? (y/n) " reconfigure
        if [[ ! $reconfigure =~ ^[Yy]$ ]]; then
            show_main_menu
            return
        fi
    fi
    
    # Ask if user wants to enable Firebase
    read -p "Do you want to enable Firebase integration? (y/n) " enable_firebase
    
    if [[ ! $enable_firebase =~ ^[Yy]$ ]]; then
        # Disable Firebase
        if grep -q "firebase:" "$CONFIG_FILE"; then
            sed -i '/firebase:/,/enabled: .*/s/enabled: .*/enabled: false/' "$CONFIG_FILE"
        else
            echo "" >> "$CONFIG_FILE"
            echo "firebase:" >> "$CONFIG_FILE"
            echo "  enabled: false" >> "$CONFIG_FILE"
        fi
        
        echo -e "${GREEN}Firebase integration disabled.${NC}"
        read -p "Press Enter to continue..." dummy
        show_main_menu
        return
    fi
    
    # Firebase configuration
    echo "To set up Firebase, you need a firebase_config.json file."
    echo "This file contains credentials to access your Firebase project."
    echo
    
    read -p "Do you have a firebase_config.json file? (y/n) " have_config
    
    if [[ ! $have_config =~ ^[Yy]$ ]]; then
        echo
        echo "To get a firebase_config.json file:"
        echo "1. Go to Firebase Console: https://console.firebase.google.com/"
        echo "2. Create or select your project"
        echo "3. Go to Project Settings > Service Accounts"
        echo "4. Click 'Generate New Private Key'"
        echo "5. Save the file as firebase_config.json"
        echo
        read -p "Press Enter to continue after you have the file..." dummy
    fi
    
    # Ask for path to firebase_config.json
    read -p "Enter the path to firebase_config.json: " firebase_config_path
    
    if [ ! -f "$firebase_config_path" ]; then
        echo -e "${RED}Error: File not found at $firebase_config_path${NC}"
        read -p "Press Enter to continue..." dummy
        show_main_menu
        return
    fi
    
    # Create Firebase directory if it doesn't exist
    mkdir -p "$FIREBASE_DIR"
    
    # Copy the config file
    cp "$firebase_config_path" "$FIREBASE_CONFIG"
    chmod 640 "$FIREBASE_CONFIG"
    
    # Ask for database URL
    read -p "Enter Firebase database URL (https://your-project-id.firebaseio.com): " database_url
    
    # Update configuration
    if grep -q "firebase:" "$CONFIG_FILE"; then
        # Update existing config
        sed -i '/firebase:/,/enabled: .*/s/enabled: .*/enabled: true/' "$CONFIG_FILE"
        sed -i "s|config_path: .*|config_path: \"$FIREBASE_CONFIG\"|" "$CONFIG_FILE"
        sed -i "s|database_url: .*|database_url: \"$database_url\"|" "$CONFIG_FILE"
    else
        # Append to config file
        echo "" >> "$CONFIG_FILE"
        echo "firebase:" >> "$CONFIG_FILE"
        echo "  enabled: true" >> "$CONFIG_FILE"
        echo "  config_path: \"$FIREBASE_CONFIG\"" >> "$CONFIG_FILE"
        echo "  database_url: \"$database_url\"" >> "$CONFIG_FILE"
        echo "  path_prefix: \"cameras\"" >> "$CONFIG_FILE"
        echo "  retry_interval: 60" >> "$CONFIG_FILE"
        echo "  batch_size: 10" >> "$CONFIG_FILE"
    fi
    
    # Ask if they want to encrypt the Firebase config
    read -p "Do you want to encrypt the Firebase configuration? (y/n) " encrypt_config
    
    if [[ $encrypt_config =~ ^[Yy]$ ]]; then
        setup_encryption
    fi
    
    echo -e "${GREEN}Firebase integration configured successfully.${NC}"
    read -p "Press Enter to continue..." dummy
    show_main_menu
}

# Set up encryption key
setup_encryption() {
    show_welcome
    echo -e "${BLUE}Encryption Setup${NC}"
    echo -e "================="
    echo
    
    # Check if encryption tool is available
    if [ ! -f "$INSTALL_DIR/utils/encrypt_config.py" ]; then
        echo -e "${RED}Error: Encryption utility not found.${NC}"
        read -p "Press Enter to continue..." dummy
        show_main_menu
        return
    fi
    
    # Generate a new encryption key
    echo "Generating a new encryption key..."
    python3 "$INSTALL_DIR/utils/encrypt_config.py" generate --save "$ENCRYPTION_KEY_FILE"
    chmod 600 "$ENCRYPTION_KEY_FILE"
    
    # Check if Firebase config exists
    if [ -f "$FIREBASE_CONFIG" ]; then
        echo "Encrypting Firebase configuration..."
        python3 "$INSTALL_DIR/utils/encrypt_config.py" encrypt --input "$FIREBASE_CONFIG" --key-file "$ENCRYPTION_KEY_FILE"
        
        # Update config to use encryption
        if grep -q "encrypt-key-file" "$CONFIG_FILE"; then
            sed -i "s|encrypt-key-file: .*|encrypt-key-file: \"$ENCRYPTION_KEY_FILE\"|" "$CONFIG_FILE"
        else
            echo "" >> "$CONFIG_FILE"
            echo "encrypt-key-file: \"$ENCRYPTION_KEY_FILE\"" >> "$CONFIG_FILE"
        fi
    fi
    
    echo -e "${GREEN}Encryption set up successfully.${NC}"
    echo -e "${YELLOW}IMPORTANT: Keep a backup of your encryption key file!${NC}"
    echo -e "The key is stored at: ${ENCRYPTION_KEY_FILE}"
    
    read -p "Press Enter to continue..." dummy
    show_main_menu
}

# Test camera
test_camera() {
    show_welcome
    echo -e "${BLUE}Camera Test${NC}"
    echo -e "============"
    echo
    
    # Check if camera test script is available
    if [ -f "$INSTALL_DIR/tests/camera/test_camera.py" ]; then
        echo "Running camera test..."
        python3 "$INSTALL_DIR/tests/camera/test_camera.py" --test webcam --duration 5
    else
        # Alternative basic test
        echo "Testing camera with a basic capture..."
        
        # Check if we're on a Raspberry Pi
        if grep -q "Raspberry Pi" /proc/device-tree/model 2>/dev/null; then
            # Try with raspistill
            if command -v raspistill > /dev/null; then
                mkdir -p "$LOG_DIR/test"
                echo "Taking a test picture with raspistill..."
                raspistill -o "$LOG_DIR/test/camera_test.jpg" -t 2000
                echo -e "${GREEN}Picture saved to $LOG_DIR/test/camera_test.jpg${NC}"
            else
                echo -e "${RED}raspistill not found. Is the camera module enabled?${NC}"
                echo "Run 'sudo raspi-config' and enable the camera interface."
            fi
        else
            # Try with OpenCV
            echo "Taking a test picture with OpenCV..."
            python3 -c "
import cv2
import time
cap = cv2.VideoCapture(0)
time.sleep(2)
ret, frame = cap.read()
if ret:
    cv2.imwrite('$LOG_DIR/test/camera_test.jpg', frame)
    print('Picture saved to $LOG_DIR/test/camera_test.jpg')
else:
    print('Failed to capture image from camera')
cap.release()
"
        fi
    fi
    
    read -p "Press Enter to continue..." dummy
    show_main_menu
}

# Manage service
manage_service() {
    show_welcome
    echo -e "${BLUE}Service Management${NC}"
    echo -e "===================="
    echo
    
    # Check service status
    if systemctl is-active --quiet manta-camera.service; then
        SERVICE_STATUS="${GREEN}Active${NC}"
    else
        SERVICE_STATUS="${RED}Inactive${NC}"
    fi
    
    echo -e "Current service status: $SERVICE_STATUS"
    echo
    echo -e "  ${YELLOW}1)${NC} Start service"
    echo -e "  ${YELLOW}2)${NC} Stop service"
    echo -e "  ${YELLOW}3)${NC} Restart service"
    echo -e "  ${YELLOW}4)${NC} Enable service (start at boot)"
    echo -e "  ${YELLOW}5)${NC} Disable service (don't start at boot)"
    echo -e "  ${YELLOW}6)${NC} View service status"
    echo -e "  ${YELLOW}0)${NC} Back to main menu"
    echo
    
    read -p "Enter your choice [0-6]: " service_choice
    
    case $service_choice in
        1)
            systemctl start manta-camera.service
            echo -e "${GREEN}Service started.${NC}"
            ;;
        2)
            systemctl stop manta-camera.service
            echo -e "${GREEN}Service stopped.${NC}"
            ;;
        3)
            systemctl restart manta-camera.service
            echo -e "${GREEN}Service restarted.${NC}"
            ;;
        4)
            systemctl enable manta-camera.service
            echo -e "${GREEN}Service enabled. It will start automatically at boot.${NC}"
            ;;
        5)
            systemctl disable manta-camera.service
            echo -e "${GREEN}Service disabled. It will not start automatically at boot.${NC}"
            ;;
        6)
            systemctl status manta-camera.service
            ;;
        0)
            show_main_menu
            return
            ;;
        *)
            echo -e "${RED}Invalid option.${NC}"
            ;;
    esac
    
    read -p "Press Enter to continue..." dummy
    manage_service
}

# View logs
view_logs() {
    show_welcome
    echo -e "${BLUE}Log Viewer${NC}"
    echo -e "============"
    echo
    
    echo -e "  ${YELLOW}1)${NC} View service logs (systemd journal)"
    echo -e "  ${YELLOW}2)${NC} View application logs"
    echo -e "  ${YELLOW}3)${NC} View event logs"
    echo -e "  ${YELLOW}0)${NC} Back to main menu"
    echo
    
    read -p "Enter your choice [0-3]: " log_choice
    
    case $log_choice in
        1)
            journalctl -u manta-camera.service -n 100 --no-pager
            ;;
        2)
            if [ -f "$LOG_DIR/manta.log" ]; then
                less "$LOG_DIR/manta.log"
            else
                echo -e "${RED}Application log file not found.${NC}"
            fi
            ;;
        3)
            if [ -f "$LOG_DIR/events.json" ]; then
                less "$LOG_DIR/events.json"
            else
                echo -e "${RED}Event log file not found.${NC}"
            fi
            ;;
        0)
            show_main_menu
            return
            ;;
        *)
            echo -e "${RED}Invalid option.${NC}"
            ;;
    esac
    
    read -p "Press Enter to continue..." dummy
    view_logs
}

# Check system status
check_status() {
    show_welcome
    echo -e "${BLUE}System Status${NC}"
    echo -e "=============="
    echo
    
    # Get system information
    echo -e "${YELLOW}System Information:${NC}"
    echo -e "-------------------"
    uname -a
    echo
    
    # Get CPU information
    echo -e "${YELLOW}CPU Information:${NC}"
    echo -e "----------------"
    lscpu | grep -E "Model name|^CPU\(s\):|MHz"
    echo
    
    # Get memory information
    echo -e "${YELLOW}Memory Information:${NC}"
    echo -e "-------------------"
    free -h
    echo
    
    # Get disk space
    echo -e "${YELLOW}Disk Space:${NC}"
    echo -e "-----------"
    df -h / "$LOG_DIR"
    echo
    
    # Check temperature (Raspberry Pi)
    if command -v vcgencmd > /dev/null; then
        echo -e "${YELLOW}CPU Temperature:${NC}"
        echo -e "----------------"
        temp=$(vcgencmd measure_temp | cut -d= -f2)
        echo "Current: $temp"
        echo
    fi
    
    # Check MANTA service status
    echo -e "${YELLOW}MANTA Service Status:${NC}"
    echo -e "--------------------"
    systemctl status manta-camera.service --no-pager
    echo
    
    read -p "Press Enter to continue..." dummy
    show_main_menu
}

# Apply hardware-specific optimizations
optimize_hardware() {
    show_welcome
    echo -e "${BLUE}Hardware Optimization${NC}"
    echo -e "======================"
    echo
    
    # Detect hardware
    if grep -q "Raspberry Pi 5" /proc/device-tree/model 2>/dev/null; then
        echo -e "Detected ${GREEN}Raspberry Pi 5${NC}"
        PI_VERSION="5"
    elif grep -q "Raspberry Pi 4" /proc/device-tree/model 2>/dev/null; then
        echo -e "Detected ${GREEN}Raspberry Pi 4${NC}"
        PI_VERSION="4"
    else
        echo -e "${YELLOW}Could not detect Raspberry Pi hardware.${NC}"
        read -p "Enter your hardware type (4 for Pi 4, 5 for Pi 5, 0 for other): " PI_VERSION
    fi
    
    case $PI_VERSION in
        5)
            echo "Applying optimizations for Raspberry Pi 5..."
            # Apply Pi 5 optimizations
            cp "${CONFIG_DIR}/config.rpi5.yaml" "$CONFIG_FILE"
            
            # Set GPU memory
            if grep -q "gpu_mem=" /boot/config.txt; then
                sed -i 's/gpu_mem=.*/gpu_mem=256/' /boot/config.txt
            else
                echo "gpu_mem=256" >> /boot/config.txt
            fi
            
            # Enable NPU if available
            if command -v rpi-npu-enable > /dev/null; then
                rpi-npu-enable
            fi
            ;;
        4)
            echo "Applying optimizations for Raspberry Pi 4..."
            # Apply Pi 4 optimizations
            cp "${CONFIG_DIR}/config.rpi4.yaml" "$CONFIG_FILE"
            
            # Set GPU memory
            if grep -q "gpu_mem=" /boot/config.txt; then
                sed -i 's/gpu_mem=.*/gpu_mem=128/' /boot/config.txt
            else
                echo "gpu_mem=128" >> /boot/config.txt
            fi
            ;;
        *)
            echo -e "${YELLOW}No specific optimizations available for your hardware.${NC}"
            ;;
    esac
    
    echo -e "${GREEN}Optimizations applied. A reboot is recommended.${NC}"
    read -p "Do you want to reboot now? (y/n) " do_reboot
    
    if [[ $do_reboot =~ ^[Yy]$ ]]; then
        echo "Rebooting..."
        reboot
    else
        read -p "Press Enter to continue..." dummy
        show_main_menu
    fi
}

# Start the script
show_main_menu